// 2022-08-18

// 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요.
// 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다.
// 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

// 두 수는 1이상 1000000이하의 자연수입니다.

// 입출력 예 #2 : 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.

function solution(n, m) {
  var answer = [];

  let a = 0;
  let b = 0;

  let c = n < m ? m : n;

  for (let i = 1; i <= c; i++) {
    if (n % i == 0 && m % i == 0) {
      a = i;
    }
  }

  b = (n * m) / a;

  answer = [a, b];
  return answer;
}

// 진짜 오랜만에 들어보는 최대공약수.. 최소공배수...
// 처음에는 n과 m 각각의 약수 배열을 구하는 반복문을 만들고 중복되는 수 중 가장 큰 수를 뽑아오려했으나
// 너무 복잡해져서 n 과 m을 i로 반복해 나눠서 나머지가 없는 경우를 동시에 충족하는 i값을 잡아왔다.

// 최소공배수는 두 숫자를 곱해서 최대공약수로 나눈값과 같다고해서 빨리 정리가 끝났지만,
// 공식 활용 없이 원론적으로? 풀어볼 수 있을까해서 한참 더 고민했다.

// 일단 지금은 뭐가뭔지 너무 모르겠어서 여기까지만 고민하기로
// 좀 더 큰다음에 다시 생각해봐야겠다.
