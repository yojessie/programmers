// 2022-08-18

// 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면
// 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

// 1-1. 입력된 수가 짝수라면 2로 나눕니다.
// 1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.
// 2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.

// 예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어
// 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요.
// 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

// 입력된 수, num은 1 이상 8,000,000 미만인 정수입니다.

// 입출력 예 #2 : 16 → 8 → 4 → 2 → 1 이 되어 총 4번 만에 1이 됩니다.
// 입출력 예 #3 : 626331은 500번을 시도해도 1이 되지 못하므로 -1을 리턴해야 합니다.

function solution(num) {
  var answer = "initial";
  let count = 0;

  for (let i = 0; i < 500; i++) {
    if (num == 1) {
      return (answer = count);
    }

    if (num % 2 == 0) {
      num = num / 2;
      count = count + 1;
    } else if (num % 2 !== 0) {
      num = num * 3 + 1;
      count = count + 1;
    }
  }

  if (num !== 1) {
    return (answer = -1);
  }

  return answer;
}

// 좀 더 다듬어보자

function solution(num) {
  var answer = 0;

  while (answer < 500) {
    if (num == 1) {
      return answer;
    }

    num = num % 2 == 0 ? num / 2 : num * 3 + 1;
    answer++;
  }

  if (num !== 1) {
    return -1;
  }
}

// 조건값이 false가 되면 반복이 종료되는 while이 더 맞는것 같아 바꾸고,
// 뺄 수 있는건 최대한 빼 보았다.

// 코드는 최대한 짧아야 좋은 것인가?
// 아직 내가 부족해서 그런지 생각의 과정이 좀 더 친절하게? 설명된 코드가 좋다.
// 아는게 많아지면 나도 더 짧게 표현하고 싶어지겠지?
