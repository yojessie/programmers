// 2022-08-26

// 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다.
// 예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

// strings는 길이 1 이상, 50이하인 배열입니다.
// strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
// strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
// 모든 strings의 원소의 길이는 n보다 큽니다.
// 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.

// 입출력 예 1 :
// "sun", "bed", "car"의 1번째 인덱스 값은 각각 "u", "e", "a" 입니다. 이를 기준으로 strings를 정렬하면 ["car", "bed", "sun"] 입니다.

function solution(strings, n) {
  return strings.sort((a, b) => {
    if (a[n] > b[n]) {
      return 1;
    }
    if (a[n] < b[n]) {
      return -1;
    }
    if (a[n] == b[n]) {
      if (a > b) {
        return 1;
      }
      if (a < b) {
        return -1;
      }
    }
  });
}

// sort로 해결해야하는 것 까지 찾았다가 도저히 정리가 안돼서 다른사람들의 알고리즘을 찾아봤다.
// 나름대로 이해한 후 코드를 작성했는데, 좀 더 진득이 고민할 걸 그랬다. 마음이 급했다.

// 배운것
// string에도 string[n] 을 적용시킬 수 있구나
// sort 함수 사용법을 더 잘 익히면 무궁무진하겠구나
// 근데 위 코드에서 각 단어 n번째가 동일할때, 그냥 a와 b를 비교해서 솔팅한다면
// a와 b의 맨 앞자리도 똑같으면 어떻게 되는거지...?
